# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
API response
"""
interface AbstractGraphQLPaginatedResponse {
  """
  The total number of items
  """
  total: NonNegativeInt!
}

"""
The level of access a user has
"""
enum AccessLevel {
  Admin
  Committee
  CommitteeChairOrCoordinator
  None
  Public
  SuperAdmin
  UKY
}

input ArrayArrayFilter {
  comparison: ArrayArrayOperators!
  value: [String!]! = []
}

enum ArrayArrayOperators {
  EQUALS
  HAS
  HAS_EVERY
  HAS_SOME
  IS_EMPTY
}

input ArrayBooleanFilter {
  comparison: ArrayOperators!
  value: [Boolean!]!
}

input ArrayDateFilter {
  comparison: ArrayOperators!
  value: [LuxonDateTime!]!
}

input ArrayNumberFilter {
  comparison: ArrayOperators!
  value: [Float!]!
}

enum ArrayOperators {
  IN
  NOT_IN
}

input ArrayStringFilter {
  comparison: ArrayOperators!
  value: [String!]!
}

input AssignEntryToPersonInput {
  amount: Float!
}

type AuditLogNode implements Node {
  createdAt: LuxonDateTime
  details: JSONObject
  id: GlobalId!

  """
  This field is only accessible to users who are allowed to all.
  """
  subject: Node

  """
  This field is only accessible to users who are allowed to all.
  """
  subjectJson: JSONObject
  summary: String!
  text: String!
  user: PersonNode
}

"""
The source of authentication
"""
enum AuthSource {
  Anonymous
  Demo
  LinkBlue
  None
  Password
}

enum BatchType {
  ACH
  Check
  CreditCard
  DBFunds
  NonCash
  P
  PayrollDeduction
  Transmittal
  Unknown
}

input BulkPersonInput {
  committee: CommitteeIdentifier
  email: EmailAddress!
  linkblue: NonEmptyString
  name: NonEmptyString
  role: CommitteeRole
}

input BulkTeamInput {
  captainLinkblues: [NonEmptyString!]
  legacyStatus: TeamLegacyStatus!
  memberLinkblues: [NonEmptyString!]
  name: NonEmptyString!
  type: TeamType!
}

"""
The identifier for a committee
"""
enum CommitteeIdentifier {
  communityDevelopmentCommittee
  corporateCommittee
  dancerRelationsCommittee
  familyRelationsCommittee
  fundraisingCommittee
  marketingCommittee
  miniMarathonsCommittee
  operationsCommittee
  overallCommittee
  programmingCommittee
  techCommittee
  viceCommittee
}

type CommitteeMembershipNode implements Node {
  committeeRole: CommitteeRole
  createdAt: LuxonDateTime
  id: GlobalId!
  identifier: CommitteeIdentifier!
  person: PersonNode!
  points: NonNegativeInt!
  position: MembershipPositionType!
  role: CommitteeRole!
  team: TeamNode!
  text: String!
  updatedAt: LuxonDateTime
}

type CommitteeNode implements Node {
  createdAt: LuxonDateTime
  id: GlobalId!
  identifier: CommitteeIdentifier!
  text: String!
  updatedAt: LuxonDateTime
}

"""
Roles within a committee
"""
enum CommitteeRole {
  Chair
  Coordinator
  Member
}

type ConfigurationNode implements Node {
  createdAt: LuxonDateTime
  id: GlobalId!
  key: String!
  text: String!
  updatedAt: LuxonDateTime
  validAfter: LuxonDateTime
  validUntil: LuxonDateTime
  value: String!
}

input CreateConfigurationInput {
  key: NonEmptyString!
  validAfter: LuxonDateTime
  validUntil: LuxonDateTime
  value: NonEmptyString!
}

input CreateEventInput {
  description: NonEmptyString
  location: NonEmptyString
  occurrences: [CreateEventOccurrenceInput!]!
  summary: NonEmptyString
  title: NonEmptyString!
}

input CreateEventOccurrenceInput {
  fullDay: Boolean!
  interval: IntervalISOInput!
}

input CreateFeedInput {
  imageUuid: GlobalId
  textContent: NonEmptyString
  title: NonEmptyString!
}

input CreateFundraisingEntryInput {
  amount: Float!
  batchType: BatchType!
  donatedBy: NonEmptyString
  donatedOn: LocalDate
  donatedTo: NonEmptyString
  notes: NonEmptyString
  solicitationCodeId: SolicitationCodeUpsert!
}

input CreateImageInput {
  alt: NonEmptyString
  url: URL
}

input CreateMarathonHourInput {
  details: NonEmptyString
  durationInfo: NonEmptyString!
  shownStartingAt: LuxonDateTime!
  title: NonEmptyString!
}

input CreateMarathonInput {
  endDate: LuxonDateTime
  startDate: LuxonDateTime
  year: MarathonYear!
}

input CreatePersonInput {
  captainOf: [MemberOf!] = []
  dbRole: DbRole @deprecated(reason: "DBRole can no longer be set directly")
  email: EmailAddress!
  linkblue: NonEmptyString
  memberOf: [MemberOf!] = []
  name: NonEmptyString
}

input CreatePointEntryInput {
  comment: NonEmptyString
  opportunityUuid: GlobalId
  personFromUuid: GlobalId
  points: Int!
  teamUuid: GlobalId!
}

input CreatePointOpportunityInput {
  eventUuid: GlobalId
  marathonUuid: GlobalId!
  name: NonEmptyString!
  opportunityDate: LuxonDateTime
  type: TeamType!
}

input CreateSolicitationCodeInput {
  code: NonNegativeInt!
  name: NonEmptyString
  prefix: NonEmptyString!
  tags: [SolicitationCodeTag!]!
}

input CreateTeamInput {
  legacyStatus: TeamLegacyStatus!
  name: NonEmptyString!
  type: TeamType!
}

type DailyDepartmentNotificationBatchNode implements Node {
  batchNumber: String!
  batchType: BatchType!
  dailyDepartmentNotifications: [DailyDepartmentNotificationNode!]!
  id: GlobalId!
  text: String!
}

input DailyDepartmentNotificationInput {
  accountName: NonEmptyString!
  accountNumber: NonEmptyString!
  advFeeAmtPhil: Float
  advFeeAmtUnit: Float
  advFeeCcPhil: NonEmptyString
  advFeeCcUnit: NonEmptyString
  advFeeStatus: NonEmptyString
  batchId: NonEmptyString!
  behalfHonorMemorial: NonEmptyString
  combinedAmount: Float!
  combinedDonorName: NonEmptyString!
  combinedDonorSalutation: NonEmptyString!
  combinedDonorSort: NonEmptyString
  comment: NonEmptyString
  department: NonEmptyString
  divFirstGift: Boolean!
  division: NonEmptyString
  donor1Amount: Float
  donor1Constituency: NonEmptyString
  donor1Deceased: Boolean
  donor1Degrees: NonEmptyString
  donor1GiftKey: NonEmptyString
  donor1Id: NonEmptyString
  donor1Name: NonEmptyString
  donor1Pm: NonEmptyString
  donor1Relation: NonEmptyString
  donor1TitleBar: NonEmptyString
  donor2Amount: Float
  donor2Constituency: NonEmptyString
  donor2Deceased: Boolean
  donor2Degrees: NonEmptyString
  donor2GiftKey: NonEmptyString
  donor2Id: NonEmptyString
  donor2Name: NonEmptyString
  donor2Pm: NonEmptyString
  donor2Relation: NonEmptyString
  donor2TitleBar: NonEmptyString
  effectiveDate: LocalDate
  gikDescription: NonEmptyString
  gikType: NonEmptyString
  hcUnit: NonEmptyString
  holdingDestination: NonEmptyString
  idSorter: NonEmptyString!
  jvDocDate: LocalDate
  jvDocNum: NonEmptyString
  matchingGift: NonEmptyString
  onlineGift: Boolean!
  pledgedAmount: Float!
  pledgedDate: LocalDate
  processDate: LocalDate!
  sapDocDate: LocalDate
  sapDocNum: NonEmptyString
  secShares: NonEmptyString
  secType: NonEmptyString
  solicitation: NonEmptyString
  solicitationCode: NonEmptyString!
  transactionDate: LocalDate
  transactionType: NonEmptyString!
  transmittalSn: NonEmptyString
  ukFirstGift: Boolean!
}

type DailyDepartmentNotificationNode {
  accountName: String!
  accountNumber: String!
  advFeeAmtPhil: Float
  advFeeAmtUnit: Float
  advFeeCcPhil: String
  advFeeCcUnit: String
  advFeeStatus: String
  batch: DailyDepartmentNotificationBatchNode!
  behalfHonorMemorial: String
  combinedAmount: Float!
  combinedDonorName: String!
  combinedDonorSalutation: String!
  combinedDonorSort: String
  comment: String
  createdAt: LuxonDateTime!
  department: String
  divFirstGift: Boolean!
  division: String
  donor1Amount: Float
  donor1Constituency: String
  donor1Deceased: Boolean
  donor1Degrees: String
  donor1GiftKey: String
  donor1Id: String
  donor1Name: String
  donor1Pm: String
  donor1Relation: String
  donor1TitleBar: String
  donor2Amount: Float
  donor2Constituency: String
  donor2Deceased: Boolean
  donor2Degrees: String
  donor2GiftKey: String
  donor2Id: String
  donor2Name: String
  donor2Pm: String
  donor2Relation: String
  donor2TitleBar: String
  effectiveDate: LocalDate
  gikDescription: String
  gikType: String
  hcUnit: String
  holdingDestination: String
  id: GlobalId!
  idSorter: String!
  jvDocDate: LocalDate
  jvDocNum: String
  matchingGift: String
  onlineGift: Boolean!
  pledgedAmount: Float!
  pledgedDate: LocalDate
  processDate: LocalDate
  sapDocDate: LocalDate
  sapDocNum: String
  secShares: String
  secType: String
  solicitation: String
  solicitationCode: SolicitationCodeNode!
  text: String!
  transactionDate: LocalDate
  transactionType: String!
  transmittalSn: String
  ukFirstGift: Boolean!
}

enum DailyDepartmentNotificationResolverFilterFields {
  Amount
  BatchType
  Comment
  Donor
  SolicitationCodeName
  SolicitationCodeNumber
  SolicitationCodePrefix
  batch
  combinedAmount
  combinedDonorName
  comment
  createdAt
  solicitationCode
}

input DailyDepartmentNotificationResolverFilterGroup {
  children: [DailyDepartmentNotificationResolverFilterGroup!]! = []
  filters: [DailyDepartmentNotificationResolverFilterItem!]! = []
  operator: FilterGroupOperator!
}

input DailyDepartmentNotificationResolverFilterItem {
  field: DailyDepartmentNotificationResolverFilterFields!
  filter: SomeFilter!
}

input DailyDepartmentNotificationResolverSearchFilter {
  """
  The fields to search in. If unspecified, searches all searchable fields. Note that searching by a field that does not support it will cause a runtime error
  """
  fields: [DailyDepartmentNotificationResolverFilterFields!]
  query: NonEmptyString!
}

input DailyDepartmentNotificationResolverSort {
  direction: SortDirection! = asc
  field: DailyDepartmentNotificationResolverFilterFields!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

"""
DanceBlue roles
"""
enum DbRole {
  Committee
  None
  Public
  UKY
}

type DeviceNode implements Node {
  createdAt: LuxonDateTime
  id: GlobalId!
  lastLoggedInUser: PersonNode
  lastLogin: LuxonDateTime

  """
  List all notification deliveries for this device
  """
  notificationDeliveries(
    page: PositiveInt = 1
    pageSize: NonNegativeInt = 10

    """
    The verifier code for this device, if it does not match then the query will be rejected
    """
    verifier: String
  ): [NotificationDeliveryNode!]!
  text: String!
  updatedAt: LuxonDateTime
}

enum DeviceResolverFilterFields {
  createdAt
  lastLoggedInUserEmail
  lastLoggedInUserName
  lastLogin
  updatedAt
}

input DeviceResolverFilterGroup {
  children: [DeviceResolverFilterGroup!]! = []
  filters: [DeviceResolverFilterItem!]! = []
  operator: FilterGroupOperator!
}

input DeviceResolverFilterItem {
  field: DeviceResolverFilterFields!
  filter: SomeFilter!
}

input DeviceResolverSearchFilter {
  """
  The fields to search in. If unspecified, searches all searchable fields. Note that searching by a field that does not support it will cause a runtime error
  """
  fields: [DeviceResolverFilterFields!]
  query: NonEmptyString!
}

input DeviceResolverSort {
  direction: SortDirection! = asc
  field: DeviceResolverFilterFields!
}

type EffectiveCommitteeRole {
  identifier: CommitteeIdentifier!
  role: CommitteeRole!
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress
  @specifiedBy(
    url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address"
  )

type EventNode implements Node {
  createdAt: LuxonDateTime
  description: String
  id: GlobalId!

  """
  List all images for this event
  """
  images: [ImageNode!]!
  location: String
  occurrences: [EventOccurrenceNode!]!
  summary: String
  text: String!
  title: String!
  updatedAt: LuxonDateTime
}

type EventOccurrenceNode {
  fullDay: Boolean!
  id: GlobalId!
  interval: IntervalISO!
}

enum EventResolverFilterFields {
  createdAt
  description
  end
  location
  occurrences
  start
  summary
  title
  updatedAt
}

input EventResolverFilterGroup {
  children: [EventResolverFilterGroup!]! = []
  filters: [EventResolverFilterItem!]! = []
  operator: FilterGroupOperator!
}

input EventResolverFilterItem {
  field: EventResolverFilterFields!
  filter: SomeFilter!
}

input EventResolverSearchFilter {
  """
  The fields to search in. If unspecified, searches all searchable fields. Note that searching by a field that does not support it will cause a runtime error
  """
  fields: [EventResolverFilterFields!]
  query: NonEmptyString!
}

input EventResolverSort {
  direction: SortDirection! = asc
  field: EventResolverFilterFields!
}

interface FeedItem {
  createdAt: LuxonDateTime
  id: GlobalId!
  image: ImageNode
  link: URL
  textContent: String
  title: String!
}

type FeedNode implements FeedItem & Node {
  createdAt: LuxonDateTime
  id: GlobalId!

  """
  The image associated with this feed item
  """
  image: ImageNode
  link: URL
  text: String!
  textContent: String
  title: String!
  updatedAt: LuxonDateTime
}

enum FilterGroupOperator {
  AND
  OR
}

type FundraisingAssignmentNode implements Node {
  amount: Float!
  createdAt: LuxonDateTime
  entry: FundraisingEntryNode!
  id: GlobalId!
  person: PersonNode
  text: String!
  updatedAt: LuxonDateTime
}

type FundraisingEntryNode implements Node {
  amount: Float!
  amountOverride: Float
  amountUnassigned: Float!

  """
  This field is only accessible to users who are allowed to [**custom subject function** (.fundraisingAssignments)].
  """
  assignments: [FundraisingAssignmentNode!]
  batchType: BatchType!
  batchTypeOverride: BatchType
  createdAt: LuxonDateTime
  dailyDepartmentNotification: DailyDepartmentNotificationNode
  donatedByOverride: String
  donatedByText: String
  donatedOn: LuxonDateTime
  donatedOnOverride: LuxonDateTime
  donatedToOverride: String
  donatedToText: String
  id: GlobalId!
  notes: String
  solicitationCode: SolicitationCodeNode!
  solicitationCodeOverride: SolicitationCodeNode
  source: FundraisingEntrySource!
  text: String!
  updatedAt: LuxonDateTime
}

enum FundraisingEntryResolverFilterFields {
  amount
  amountUnassigned
  batchType
  createdAt
  donatedBy
  donatedOn
  donatedTo
  solicitationCode
  solicitationCodeTags
  updatedAt
}

input FundraisingEntryResolverFilterGroup {
  children: [FundraisingEntryResolverFilterGroup!]! = []
  filters: [FundraisingEntryResolverFilterItem!]! = []
  operator: FilterGroupOperator!
}

input FundraisingEntryResolverFilterItem {
  field: FundraisingEntryResolverFilterFields!
  filter: SomeFilter!
}

input FundraisingEntryResolverSearchFilter {
  """
  The fields to search in. If unspecified, searches all searchable fields. Note that searching by a field that does not support it will cause a runtime error
  """
  fields: [FundraisingEntryResolverFilterFields!]
  query: NonEmptyString!
}

input FundraisingEntryResolverSort {
  direction: SortDirection! = asc
  field: FundraisingEntryResolverFilterFields!
}

enum FundraisingEntrySource {
  DBFunds
  DDN
  Override
}

type GetConfigurationByUuidResponse {
  data: ConfigurationNode!
}

type GetDeviceByUuidResponse {
  data: DeviceNode!
}

"""
GlobalId custom scalar type
"""
scalar GlobalId

type ImageNode implements Node {
  alt: String
  createdAt: LuxonDateTime
  height: Int!
  id: GlobalId!
  mimeType: String!
  text: String!
  thumbHash: String
  updatedAt: LuxonDateTime
  url: URL
  width: Int!
}

enum ImageResolverFilterFields {
  alt
  createdAt
  height
  updatedAt
  width
}

input ImageResolverFilterGroup {
  children: [ImageResolverFilterGroup!]! = []
  filters: [ImageResolverFilterItem!]! = []
  operator: FilterGroupOperator!
}

input ImageResolverFilterItem {
  field: ImageResolverFilterFields!
  filter: SomeFilter!
}

input ImageResolverSearchFilter {
  """
  The fields to search in. If unspecified, searches all searchable fields. Note that searching by a field that does not support it will cause a runtime error
  """
  fields: [ImageResolverFilterFields!]
  query: NonEmptyString!
}

input ImageResolverSort {
  direction: SortDirection! = asc
  field: ImageResolverFilterFields!
}

type InstagramFeedNode implements FeedItem & Node {
  createdAt: LuxonDateTime
  id: GlobalId!
  image: ImageNode
  link: URL
  text: String!
  textContent: String
  title: String!
  updatedAt: LuxonDateTime
}

type IntervalISO {
  end: LuxonDateTime!
  start: LuxonDateTime!
}

input IntervalISOInput {
  end: LuxonDateTime!
  start: LuxonDateTime!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type ListAuditLogsResponse implements AbstractGraphQLPaginatedResponse {
  data: [AuditLogNode!]!

  """
  The total number of items
  """
  total: NonNegativeInt!
}

type ListDailyDepartmentNotificationsResponse implements AbstractGraphQLPaginatedResponse {
  data: [DailyDepartmentNotificationNode!]!

  """
  The total number of items
  """
  total: NonNegativeInt!
}

type ListDevicesResponse implements AbstractGraphQLPaginatedResponse {
  data: [DeviceNode!]!

  """
  The total number of items
  """
  total: NonNegativeInt!
}

type ListEventsResponse implements AbstractGraphQLPaginatedResponse {
  data: [EventNode!]!

  """
  The total number of items
  """
  total: NonNegativeInt!
}

type ListFundraisingEntriesResponse implements AbstractGraphQLPaginatedResponse {
  data: [FundraisingEntryNode!]!

  """
  The total number of items
  """
  total: NonNegativeInt!
}

type ListImagesResponse implements AbstractGraphQLPaginatedResponse {
  data: [ImageNode!]!

  """
  The total number of items
  """
  total: NonNegativeInt!
}

type ListMarathonHoursResponse implements AbstractGraphQLPaginatedResponse {
  data: [MarathonHourNode!]!

  """
  The total number of items
  """
  total: NonNegativeInt!
}

type ListMarathonsResponse implements AbstractGraphQLPaginatedResponse {
  data: [MarathonNode!]!

  """
  The total number of items
  """
  total: NonNegativeInt!
}

type ListNotificationDeliveriesResponse implements AbstractGraphQLPaginatedResponse {
  data: [NotificationDeliveryNode!]!

  """
  The total number of items
  """
  total: NonNegativeInt!
}

type ListNotificationsResponse implements AbstractGraphQLPaginatedResponse {
  data: [NotificationNode!]!

  """
  The total number of items
  """
  total: NonNegativeInt!
}

type ListPeopleResponse implements AbstractGraphQLPaginatedResponse {
  data: [PersonNode!]!

  """
  The total number of items
  """
  total: NonNegativeInt!
}

type ListPointEntriesResponse implements AbstractGraphQLPaginatedResponse {
  data: [PointEntryNode!]!

  """
  The total number of items
  """
  total: NonNegativeInt!
}

type ListPointOpportunitiesResponse implements AbstractGraphQLPaginatedResponse {
  data: [PointOpportunityNode!]!

  """
  The total number of items
  """
  total: NonNegativeInt!
}

type ListSolicitationCodesResponse implements AbstractGraphQLPaginatedResponse {
  data: [SolicitationCodeNode!]!

  """
  The total number of items
  """
  total: NonNegativeInt!
}

type ListTeamsResponse implements AbstractGraphQLPaginatedResponse {
  data: [TeamNode!]!

  """
  The total number of items
  """
  total: NonNegativeInt!
}

"""
A local date string (i.e., with no associated timezone) in `YYYY-MM-DD` format, e.g. `2020-01-01`.
"""
scalar LocalDate

type LoginState {
  abilityRules: [[JSON!]!]!
  accessLevel: AccessLevel!
  authSource: AuthSource!
  dbRole: DbRole!
  effectiveCommitteeRoles: [EffectiveCommitteeRole!]!
  loggedIn: Boolean!
}

"""
Cursor custom scalar type
"""
scalar LuxonDateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339")

type MarathonHourNode implements Node {
  createdAt: LuxonDateTime
  details: String
  durationInfo: String!
  id: GlobalId!
  mapImages: [ImageNode!]!
  shownStartingAt: LuxonDateTime!
  text: String!
  title: String!
  updatedAt: LuxonDateTime
}

enum MarathonHourResolverFilterFields {
  createdAt
  details
  durationInfo
  marathonYear
  shownStartingAt
  title
  updatedAt
}

input MarathonHourResolverFilterGroup {
  children: [MarathonHourResolverFilterGroup!]! = []
  filters: [MarathonHourResolverFilterItem!]! = []
  operator: FilterGroupOperator!
}

input MarathonHourResolverFilterItem {
  field: MarathonHourResolverFilterFields!
  filter: SomeFilter!
}

input MarathonHourResolverSearchFilter {
  """
  The fields to search in. If unspecified, searches all searchable fields. Note that searching by a field that does not support it will cause a runtime error
  """
  fields: [MarathonHourResolverFilterFields!]
  query: NonEmptyString!
}

input MarathonHourResolverSort {
  direction: SortDirection! = asc
  field: MarathonHourResolverFilterFields!
}

type MarathonNode implements Node {
  createdAt: LuxonDateTime
  endDate: LuxonDateTime

  """
  This field is only accessible to users who are allowed to **list** any **MarathonNode** with an id of **root.id**.
  """
  hours: [MarathonHourNode!]
  id: GlobalId!
  startDate: LuxonDateTime
  text: String!
  updatedAt: LuxonDateTime
  year: MarathonYear!
}

enum MarathonResolverFilterFields {
  createdAt
  endDate
  startDate
  updatedAt
  year
}

input MarathonResolverFilterGroup {
  children: [MarathonResolverFilterGroup!]! = []
  filters: [MarathonResolverFilterItem!]! = []
  operator: FilterGroupOperator!
}

input MarathonResolverFilterItem {
  field: MarathonResolverFilterFields!
  filter: SomeFilter!
}

input MarathonResolverSearchFilter {
  """
  The fields to search in. If unspecified, searches all searchable fields. Note that searching by a field that does not support it will cause a runtime error
  """
  fields: [MarathonResolverFilterFields!]
  query: NonEmptyString!
}

input MarathonResolverSort {
  direction: SortDirection! = asc
  field: MarathonResolverFilterFields!
}

"""
MarathonYear custom scalar type
"""
scalar MarathonYear

input MemberOf {
  committeeRole: CommitteeRole
  id: GlobalId!
}

type MembershipNode implements Node {
  committeeRole: CommitteeRole
  createdAt: LuxonDateTime
  id: GlobalId!
  person: PersonNode!
  points: NonNegativeInt!
  position: MembershipPositionType!
  team: TeamNode!
  text: String!
  updatedAt: LuxonDateTime
}

"""
The position of a member on a team
"""
enum MembershipPositionType {
  Captain
  Member
}

type Mutation {
  """
  This mutation is only accessible to users who are allowed to **deploy** any **NotificationNode** with an id of **args.id**.
  """
  abortScheduledNotification(id: GlobalId!): NotificationNode

  """
  This mutation is only accessible to users who are allowed to **deploy** any **NotificationNode** with an id of **args.id**.
  """
  acknowledgeDeliveryIssue(id: GlobalId!): NotificationNode

  """
  Add an existing image to an event

  This mutation is only accessible to users who are allowed to **update** any **EventNode** with an id of **args.eventId**.
  """
  addExistingImageToEvent(eventId: GlobalId!, imageId: GlobalId!): ImageNode

  """
  This mutation is only accessible to users who are allowed to **update** any **MarathonHourNode** with an id of **args.id**.
  """
  addMap(id: GlobalId!, imageUuid: GlobalId!): MarathonHourNode

  """
  This mutation is only accessible to users who are allowed to **update** any **TeamNode.members** with an id of **args.teamUuid**.
  """
  addPersonToTeam(
    personUuid: GlobalId!
    position: MembershipPositionType! = Member
    teamUuid: GlobalId!
  ): MembershipNode

  """
  This mutation is only accessible to users who are allowed to [**custom subject function** (.fundraisingAssignments)].
  """
  assignEntryToPerson(
    entryId: GlobalId!
    input: AssignEntryToPersonInput!
    personId: GlobalId!
  ): FundraisingAssignmentNode

  """
  This mutation is only accessible to users who are allowed to **update** any **TeamNode.solicitationCode** with an id of **args.teamId**.
  """
  assignSolicitationCodeToTeam(id: GlobalId!, teamId: GlobalId!): Void

  """
  Attach an image to a feed item

  This mutation is only accessible to users who are allowed to **update** any **FeedNode** with an id of **args.feedItemUuid**.
  """
  attachImageToFeedItem(feedItemUuid: GlobalId!, imageUuid: GlobalId!): FeedNode

  """
  This mutation is only accessible to users who are allowed to **create DailyDepartmentNotificationNodes**.
  """
  batchUploadDailyDepartmentNotifications(
    input: [DailyDepartmentNotificationInput!]!
  ): [DailyDepartmentNotificationNode!]

  """
  This mutation is only accessible to users who are allowed to **create PersonNodes**.
  """
  bulkLoadPeople(
    marathonId: GlobalId!
    people: [BulkPersonInput!]!
  ): [PersonNode!]

  """
  Create a new configuration, superseding existing configurations with the same key (depending on the validAfter and validUntil fields)

  This mutation is only accessible to users who are allowed to **create ConfigurationNodes**.
  """
  createConfiguration(input: CreateConfigurationInput!): ConfigurationNode

  """
  Create multiple configurations, superseding existing configurations with the same key (depending on the validAfter and validUntil fields)

  This mutation is only accessible to users who are allowed to **create ConfigurationNodes**.
  """
  createConfigurations(
    input: [CreateConfigurationInput!]!
  ): [ConfigurationNode!]

  """
  This mutation is only accessible to users who are allowed to **create DailyDepartmentNotificationNodes**.
  """
  createDailyDepartmentNotification(
    input: DailyDepartmentNotificationInput!
  ): DailyDepartmentNotificationNode

  """
  Create a new event

  This mutation is only accessible to users who are allowed to **create EventNodes**.
  """
  createEvent(input: CreateEventInput!): EventNode

  """
  Add a new item to the feed

  This mutation is only accessible to users who are allowed to **create FeedNodes**.
  """
  createFeedItem(input: CreateFeedInput!): FeedNode

  """
  This mutation is only accessible to users who are allowed to **create FundraisingEntryNodes**.
  """
  createFundraisingEntries(
    input: [CreateFundraisingEntryInput!]!
  ): [FundraisingEntryNode!]

  """
  This mutation is only accessible to users who are allowed to **create FundraisingEntryNodes**.
  """
  createFundraisingEntry(
    input: CreateFundraisingEntryInput!
  ): FundraisingEntryNode

  """
  This mutation is only accessible to users who are allowed to **create ImageNodes**.
  """
  createImage(input: CreateImageInput!): ImageNode

  """
  This mutation is only accessible to users who are allowed to **create MarathonNodes**.
  """
  createMarathon(input: CreateMarathonInput!): MarathonNode

  """
  This mutation is only accessible to users who are allowed to **create MarathonHourNodes**.
  """
  createMarathonHour(
    input: CreateMarathonHourInput!
    marathonUuid: GlobalId!
  ): MarathonHourNode

  """
  This mutation is only accessible to users who are allowed to **create PersonNodes**.
  """
  createPerson(input: CreatePersonInput!): PersonNode

  """
  This mutation is only accessible to users who are allowed to **create PointEntryNodes**.
  """
  createPointEntry(input: CreatePointEntryInput!): PointEntryNode

  """
  This mutation is only accessible to users who are allowed to **create PointOpportunityNodes**.
  """
  createPointOpportunity(
    input: CreatePointOpportunityInput!
  ): PointOpportunityNode

  """
  This mutation is only accessible to users who are allowed to **create SolicitationCodeNodes**.
  """
  createSolicitationCode(
    input: CreateSolicitationCodeInput!
  ): SolicitationCodeNode

  """
  This mutation is only accessible to users who are allowed to **create TeamNodes**.
  """
  createTeam(input: CreateTeamInput!, marathon: GlobalId!): TeamNode

  """
  This mutation is only accessible to users who are allowed to **create TeamNodes**.
  """
  createTeams(marathonId: GlobalId!, teams: [BulkTeamInput!]!): [TeamNode!]

  """
  Delete a configuration by UUID

  This mutation is only accessible to users who are allowed to **delete** **every ConfigurationNode**.
  """
  deleteConfiguration(id: GlobalId!): ConfigurationNode

  """
  This mutation is only accessible to users who are allowed to **delete** any **DailyDepartmentNotificationNode** with an id of **args.id**.
  """
  deleteDailyDepartmentNotification(
    id: GlobalId!
  ): DailyDepartmentNotificationNode

  """
  This mutation is only accessible to users who are allowed to **list** **every DailyDepartmentNotificationBatchNode**.
  """
  deleteDailyDepartmentNotificationBatch(
    id: GlobalId!
  ): DailyDepartmentNotificationBatchNode

  """
  Delete a device by it's UUID

  This mutation is only accessible to users who are allowed to **delete** any **DeviceNode** with an id of **args.id**.
  """
  deleteDevice(id: GlobalId!): DeviceNode

  """
  Delete an event by UUID

  This mutation is only accessible to users who are allowed to **delete** any **EventNode** with an id of **args.id**.
  """
  deleteEvent(id: GlobalId!): EventNode

  """
  Delete a feed item

  This mutation is only accessible to users who are allowed to [**custom subject function** ()].
  """
  deleteFeedItem(feedItemUuid: GlobalId!): Boolean

  """
  This mutation is only accessible to users who are allowed to [**custom subject function** (.fundraisingAssignments)].
  """
  deleteFundraisingAssignment(id: GlobalId!): FundraisingAssignmentNode

  """
  This mutation is only accessible to users who are allowed to **delete** any **FundraisingEntryNode** with an id of **args.id**.
  """
  deleteFundraisingEntry(id: GlobalId!): FundraisingEntryNode

  """
  This mutation is only accessible to users who are allowed to **delete** any **ImageNode** with an id of **args.id**.
  """
  deleteImage(id: GlobalId!): ImageNode

  """
  This mutation is only accessible to users who are allowed to **delete** any **MarathonNode** with an id of **args.id**.
  """
  deleteMarathon(id: GlobalId!): MarathonNode

  """
  This mutation is only accessible to users who are allowed to **delete** any **MarathonHourNode** with an id of **args.id**.
  """
  deleteMarathonHour(id: GlobalId!): MarathonHourNode

  """
  This mutation is only accessible to users who are allowed to **delete** any **NotificationNode** with an id of **args.id**.
  """
  deleteNotification(
    """
    If true, the notification will be deleted even if it has already been sent, which will also delete the delivery records.
    """
    force: Boolean
    id: GlobalId!
  ): NotificationNode

  """
  This mutation is only accessible to users who are allowed to **delete** any **PersonNode** with an id of **args.id**.
  """
  deletePerson(id: GlobalId!): PersonNode

  """
  This mutation is only accessible to users who are allowed to **delete** any **PointEntryNode** with an id of **args.id**.
  """
  deletePointEntry(id: GlobalId!): PointEntryNode

  """
  This mutation is only accessible to users who are allowed to **delete** any **PointOpportunityNode** with an id of **args.id**.
  """
  deletePointOpportunity(id: GlobalId!): PointOpportunityNode

  """
  This mutation is only accessible to users who are allowed to **delete** any **TeamNode** with an id of **args.id**.
  """
  deleteTeam(id: GlobalId!): TeamNode

  """
  Register a new device, or update an existing one
  """
  registerDevice(input: RegisterDeviceInput!): RegisterDeviceResponse!

  """
  Remove an image from an event

  This mutation is only accessible to users who are allowed to **update** any **EventNode** with an id of **args.eventId**.
  """
  removeImageFromEvent(eventId: GlobalId!, imageId: GlobalId!): Void

  """
  Remove an image from a feed item

  This mutation is only accessible to users who are allowed to **update** any **FeedNode** with an id of **args.feedItemUuid**.
  """
  removeImageFromFeedItem(feedItemUuid: GlobalId!): FeedNode

  """
  This mutation is only accessible to users who are allowed to **update** any **MarathonHourNode** with an id of **args.id**.
  """
  removeMap(id: GlobalId!, imageUuid: GlobalId!): Void

  """
  This mutation is only accessible to users who are allowed to **update** any **TeamNode.members** with an id of **args.teamUuid**.
  """
  removePersonFromTeam(
    personUuid: GlobalId!
    teamUuid: GlobalId!
  ): MembershipNode

  """
  This mutation is only accessible to users who are allowed to **update** any **TeamNode.solicitationCode** with an id of **args.teamId**.
  """
  removeSolicitationCodeFromTeam(teamId: GlobalId!): Void

  """
  This mutation is only accessible to users who are allowed to **deploy** any **NotificationNode** with an id of **args.id**.
  """
  scheduleNotification(id: GlobalId!, sendAt: DateTimeISO!): NotificationNode

  """
  Send a notification immediately.

  This mutation is only accessible to users who are allowed to **deploy** any **NotificationNode** with an id of **args.id**.
  """
  sendNotification(id: GlobalId!): Void

  """
  Update an event by UUID

  This mutation is only accessible to users who are allowed to **update** any **EventNode** with an id of **args.id**.
  """
  setEvent(id: GlobalId!, input: SetEventInput!): EventNode

  """
  Set the content of a feed item

  This mutation is only accessible to users who are allowed to **update** any **FeedNode** with an id of **args.feedItemUuid**.
  """
  setFeedItem(feedItemUuid: GlobalId!, input: SetFeedInput!): FeedNode

  """
  This mutation is only accessible to users who are allowed to **update** any **FundraisingEntryNode** with an id of **args.id**.
  """
  setFundraisingEntry(
    id: GlobalId!
    input: SetFundraisingEntryInput!
  ): FundraisingEntryNode

  """
  This mutation is only accessible to users who are allowed to **update** any **ImageNode** with an id of **args.id**.
  """
  setImageAltText(alt: String!, id: GlobalId!): ImageNode

  """
  This mutation is only accessible to users who are allowed to **update** any **ImageNode** with an id of **args.id**.
  """
  setImageUrl(id: GlobalId!, url: URL!): ImageNode

  """
  This mutation is only accessible to users who are allowed to **update** any **MarathonNode** with an id of **args.id**.
  """
  setMarathon(id: GlobalId!, input: SetMarathonInput!): MarathonNode

  """
  This mutation is only accessible to users who are allowed to **update** any **MarathonHourNode** with an id of **args.id**.
  """
  setMarathonHour(id: GlobalId!, input: SetMarathonHourInput!): MarathonHourNode

  """
  This mutation is only accessible to users who are allowed to **update** any **PersonNode** with an id of **args.id**.
  """
  setPerson(id: GlobalId!, input: SetPersonInput!): PersonNode

  """
  This mutation is only accessible to users who are allowed to **update** any **PersonNode.password** with an id of **args.id**.
  """
  setPersonPassword(id: GlobalId!, password: SetPasswordInput!): PersonNode

  """
  This mutation is only accessible to users who are allowed to **update** any **PointOpportunityNode** with an id of **args.id**.
  """
  setPointOpportunity(
    id: GlobalId!
    input: SetPointOpportunityInput!
  ): PointOpportunityNode

  """
  This mutation is only accessible to users who are allowed to **update** any **SolicitationCodeNode** with an id of **args.id**.
  """
  setSolicitationCode(
    id: GlobalId!
    input: SetSolicitationCodeInput!
  ): SolicitationCodeNode

  """
  This mutation is only accessible to users who are allowed to **update** any **TeamNode** with an id of **args.id**.
  """
  setTeam(id: GlobalId!, input: SetTeamInput!): TeamNode

  """
  This mutation is only accessible to users who are allowed to **create NotificationNodes**.
  """
  stageNotification(
    audience: NotificationAudienceInput!
    body: NonEmptyString!
    title: NonEmptyString!
    url: URL
  ): NotificationNode

  """
  This mutation is only accessible to users who are allowed to [**custom subject function** (.fundraisingAssignments)].
  """
  updateFundraisingAssignment(
    id: GlobalId!
    input: UpdateFundraisingAssignmentInput!
  ): FundraisingAssignmentNode
}

enum NoTargetOperators {
  IS_NOT_NULL
  IS_NULL
}

interface Node {
  id: GlobalId!

  """
  A human-readable string representing the object.
  """
  text: String!
}

"""
A string that cannot be passed as an empty value
"""
scalar NonEmptyString

"""
Integers that will have a value of 0 or more.
"""
scalar NonNegativeInt

input NotificationAudienceInput {
  all: Boolean
  memberOfTeamType: TeamType
  memberOfTeams: [GlobalId!]
  users: [GlobalId!]
}

"""
The number of delivery issues for a notification, broken down by type.
"""
type NotificationDeliveryIssueCount {
  DeviceNotRegistered: Int!
  InvalidCredentials: Int!
  MessageRateExceeded: Int!
  MessageTooBig: Int!
  MismatchSenderId: Int!
  Unknown: Int!
}

type NotificationDeliveryNode implements Node {
  """
  A unique identifier corresponding the group of notifications this was sent to Expo with.
  """
  chunkUuid: String
  createdAt: LuxonDateTime

  """
  Any error message returned by Expo when sending the notification.
  """
  deliveryError: String
  id: GlobalId!
  notification: NotificationNode!

  """
  The time the server received a delivery receipt from the user.
  """
  receiptCheckedAt: LuxonDateTime

  """
  The time the server sent the notification to Expo for delivery.
  """
  sentAt: LuxonDateTime
  text: String!
  updatedAt: LuxonDateTime
}

enum NotificationDeliveryResolverFilterFields {
  createdAt
  deliveryError
  receiptCheckedAt
  sentAt
  updatedAt
}

input NotificationDeliveryResolverFilterGroup {
  children: [NotificationDeliveryResolverFilterGroup!]! = []
  filters: [NotificationDeliveryResolverFilterItem!]! = []
  operator: FilterGroupOperator!
}

input NotificationDeliveryResolverFilterItem {
  field: NotificationDeliveryResolverFilterFields!
  filter: SomeFilter!
}

input NotificationDeliveryResolverSearchFilter {
  """
  The fields to search in. If unspecified, searches all searchable fields. Note that searching by a field that does not support it will cause a runtime error
  """
  fields: [NotificationDeliveryResolverFilterFields!]
  query: NonEmptyString!
}

input NotificationDeliveryResolverSort {
  direction: SortDirection! = asc
  field: NotificationDeliveryResolverFilterFields!
}

type NotificationNode implements Node {
  body: String!
  createdAt: LuxonDateTime

  """
  This field is only accessible to users who are allowed to **get** any **NotificationNode** with an id of **root.id**.
  """
  deliveryCount: Int
  deliveryIssue: String
  deliveryIssueAcknowledgedAt: LuxonDateTime

  """
  This field is only accessible to users who are allowed to **get** any **NotificationNode** with an id of **root.id**.
  """
  deliveryIssueCount: NotificationDeliveryIssueCount
  id: GlobalId!

  """
  The time the notification is scheduled to be sent, if null it is either already sent or unscheduled.
  """
  sendAt: LuxonDateTime

  """
  The time the server started sending the notification.
  """
  startedSendingAt: LuxonDateTime
  text: String!
  title: String!
  updatedAt: LuxonDateTime
  url: URL
}

enum NotificationResolverFilterFields {
  body
  createdAt
  deliveryIssue
  deliveryIssueAcknowledgedAt
  sendAt
  startedSendingAt
  title
  updatedAt
}

input NotificationResolverFilterGroup {
  children: [NotificationResolverFilterGroup!]! = []
  filters: [NotificationResolverFilterItem!]! = []
  operator: FilterGroupOperator!
}

input NotificationResolverFilterItem {
  field: NotificationResolverFilterFields!
  filter: SomeFilter!
}

input NotificationResolverSearchFilter {
  """
  The fields to search in. If unspecified, searches all searchable fields. Note that searching by a field that does not support it will cause a runtime error
  """
  fields: [NotificationResolverFilterFields!]
  query: NonEmptyString!
}

input NotificationResolverSort {
  direction: SortDirection! = asc
  field: NotificationResolverFilterFields!
}

input NullFilter {
  comparison: NoTargetOperators!
}

type PersonNode implements Node {
  """
  This field is only accessible to users who are allowed to **get** any **PersonNode.memberships** with an id of **root.id**.
  """
  committees: [CommitteeMembershipNode!]
  createdAt: LuxonDateTime
  email: String!

  """
  This field is only accessible to users who are allowed to **list** any **PersonNode.fundraisingAssignments** with an id of **root.id**.
  """
  fundraisingAssignments: [FundraisingAssignmentNode!]

  """
  This field is only accessible to users who are allowed to **get** any **PersonNode.fundraisingAssignments** with an id of **root.id**.
  """
  fundraisingTotalAmount: Float

  """
  This field is only accessible to users who are allowed to **get** any **PersonNode.password** with an id of **root.id**.
  """
  hasPassword: Boolean
  id: GlobalId!
  linkblue: String

  """
  This field is only accessible to users who are allowed to **get** any **PersonNode.memberships** with an id of **root.id**.
  """
  moraleTeams: [MembershipNode!]
  name: String

  """
  This field is only accessible to users who are allowed to **get** any **PersonNode.memberships** with an id of **root.id**.
  """
  primaryCommittee: CommitteeMembershipNode

  """
  This field is only accessible to users who are allowed to **get** any **PersonNode.memberships** with an id of **root.id**.
  """
  primaryTeam(teamType: TeamType!): MembershipNode

  """
  This field is only accessible to users who are allowed to **get** any **PersonNode.memberships** with an id of **root.id**.
  """
  teams: [MembershipNode!]
  text: String!
  updatedAt: LuxonDateTime
}

enum PersonResolverFilterFields {
  committeeName
  committeeRole
  email
  linkblue
  name
}

input PersonResolverFilterGroup {
  children: [PersonResolverFilterGroup!]! = []
  filters: [PersonResolverFilterItem!]! = []
  operator: FilterGroupOperator!
}

input PersonResolverFilterItem {
  field: PersonResolverFilterFields!
  filter: SomeFilter!
}

input PersonResolverSearchFilter {
  """
  The fields to search in. If unspecified, searches all searchable fields. Note that searching by a field that does not support it will cause a runtime error
  """
  fields: [PersonResolverFilterFields!]
  query: NonEmptyString!
}

input PersonResolverSort {
  direction: SortDirection! = asc
  field: PersonResolverFilterFields!
}

type PointEntryNode implements Node {
  comment: String
  createdAt: LuxonDateTime
  id: GlobalId!
  personFrom: PersonNode
  pointOpportunity: PointOpportunityNode
  points: Int!
  team: TeamNode!
  text: String!
  updatedAt: LuxonDateTime
}

enum PointEntryResolverFilterFields {
  createdAt
  updatedAt
}

input PointEntryResolverFilterGroup {
  children: [PointEntryResolverFilterGroup!]! = []
  filters: [PointEntryResolverFilterItem!]! = []
  operator: FilterGroupOperator!
}

input PointEntryResolverFilterItem {
  field: PointEntryResolverFilterFields!
  filter: SomeFilter!
}

input PointEntryResolverSearchFilter {
  """
  The fields to search in. If unspecified, searches all searchable fields. Note that searching by a field that does not support it will cause a runtime error
  """
  fields: [PointEntryResolverFilterFields!]
  query: NonEmptyString!
}

input PointEntryResolverSort {
  direction: SortDirection! = asc
  field: PointEntryResolverFilterFields!
}

type PointOpportunityNode implements Node {
  createdAt: LuxonDateTime
  event: EventNode
  id: GlobalId!
  name: String!
  opportunityDate: LuxonDateTime
  text: String!
  type: TeamType!
  updatedAt: LuxonDateTime
}

enum PointOpportunityResolverFilterFields {
  createdAt
  marathonYear
  name
  opportunityDate
  type
  updatedAt
}

input PointOpportunityResolverFilterGroup {
  children: [PointOpportunityResolverFilterGroup!]! = []
  filters: [PointOpportunityResolverFilterItem!]! = []
  operator: FilterGroupOperator!
}

input PointOpportunityResolverFilterItem {
  field: PointOpportunityResolverFilterFields!
  filter: SomeFilter!
}

input PointOpportunityResolverSearchFilter {
  """
  The fields to search in. If unspecified, searches all searchable fields. Note that searching by a field that does not support it will cause a runtime error
  """
  fields: [PointOpportunityResolverFilterFields!]
  query: NonEmptyString!
}

input PointOpportunityResolverSort {
  direction: SortDirection! = asc
  field: PointOpportunityResolverFilterFields!
}

"""
Integers that will have a value greater than 0.
"""
scalar PositiveInt

type Query {
  """
  Get the active configuration for a given key at the current time

  This query is only accessible to users who are allowed to **readActive** **every ConfigurationNode**.
  """
  activeConfiguration(key: String!): GetConfigurationByUuidResponse

  """
  Get all configurations, irrespective of time

  This query is only accessible to users who are allowed to **list** **every ConfigurationNode**.
  """
  allConfigurations: [ConfigurationNode!]

  """
  Get a list of audit logs

  This query is only accessible to users who are allowed to **read** **every AuditLogNode**.
  """
  auditLogs(
    idSearch: NonEmptyString
    page: PositiveInt = 1
    pageSize: PositiveInt = 10
    textSearch: NonEmptyString
    typenameSearch: NonEmptyString
  ): ListAuditLogsResponse
  buildTimestamp: LuxonDateTime

  """
  Get a particular configuration entry by UUID

  This query is only accessible to users who are allowed to **get** any **ConfigurationNode** with an id of **args.id**.
  """
  configuration(id: GlobalId!): ConfigurationNode

  """
  The marathon that is currently happening, i.e. the marathon with the latest start date that has not yet ended.

  This query is only accessible to users who are allowed to **readActive** **every MarathonNode**.
  """
  currentMarathon: MarathonNode

  """
  This query is only accessible to users who are allowed to **readActive** **every MarathonHourNode**.
  """
  currentMarathonHour: MarathonHourNode

  """
  This query is only accessible to users who are allowed to **get** any **DailyDepartmentNotificationNode** with an id of **args.id**.
  """
  dailyDepartmentNotification(id: GlobalId!): DailyDepartmentNotificationNode

  """
  This query is only accessible to users who are allowed to **get** any **DailyDepartmentNotificationBatchNode** with an id of **args.id**.
  """
  dailyDepartmentNotificationBatch(
    id: GlobalId!
  ): DailyDepartmentNotificationBatchNode

  """
  This query is only accessible to users who are allowed to **list** **every DailyDepartmentNotificationNode**.
  """
  dailyDepartmentNotifications(
    filters: DailyDepartmentNotificationResolverFilterGroup

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: DailyDepartmentNotificationResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [DailyDepartmentNotificationResolverSort!]
  ): ListDailyDepartmentNotificationsResponse

  """
  Get a device by it's UUID
  """
  device(
    """
    For legacy reasons, this can be a GlobalId or a raw UUID
    """
    uuid: String!
  ): GetDeviceByUuidResponse!

  """
  List all devices

  This query is only accessible to users who are allowed to **list** **every DeviceNode**.
  """
  devices(
    filters: DeviceResolverFilterGroup

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: DeviceResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [DeviceResolverSort!]
  ): ListDevicesResponse
  error: Void!

  """
  Get an event by UUID

  This query is only accessible to users who are allowed to **get** any **EventNode** with an id of **args.id**.
  """
  event(id: GlobalId!): EventNode

  """
  List events

  This query is only accessible to users who are allowed to **list** **every EventNode**.
  """
  events(
    filters: EventResolverFilterGroup

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: EventResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [EventResolverSort!]
  ): ListEventsResponse

  """
  Get the active feed
  """
  feed(limit: Int = 10): [FeedItem!]!

  """
  Get a feed item by its UUID
  """
  feedItem(feedItemId: GlobalId!): FeedNode!

  """
  This query is only accessible to users who are allowed to [**custom subject function** (.fundraisingAssignments)].
  """
  fundraisingAssignment(id: GlobalId!): FundraisingAssignmentNode

  """
  This query is only accessible to users who are allowed to **list** **every FundraisingEntryNode**.
  """
  fundraisingEntries(
    filters: FundraisingEntryResolverFilterGroup

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: FundraisingEntryResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [FundraisingEntryResolverSort!]
  ): ListFundraisingEntriesResponse

  """
  This query is only accessible to users who are allowed to **get** any **FundraisingEntryNode** with an id of **args.id**.
  """
  fundraisingEntry(id: GlobalId!): FundraisingEntryNode

  """
  This query is only accessible to users who are allowed to **get** **every FundraisingEntryNode.grandTotal**.
  """
  grandTotal(marathonId: GlobalId): Float

  """
  This query is only accessible to users who are allowed to **get** any **ImageNode** with an id of **args.id**.
  """
  image(id: GlobalId!): ImageNode

  """
  This query is only accessible to users who are allowed to **list** **every ImageNode**.
  """
  images(
    filters: ImageResolverFilterGroup

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: ImageResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [ImageResolverSort!]
  ): ListImagesResponse

  """
  The most recent marathon, regardless of whether it is currently happening, i.e. the marathon with the latest year.

  This query is only accessible to users who are allowed to **readActive** **every MarathonNode**.
  """
  latestMarathon: MarathonNode
  loginState: LoginState!

  """
  This query is only accessible to users who are allowed to **get** any **MarathonNode** with an id of **args.id**.
  """
  marathon(id: GlobalId!): MarathonNode

  """
  This query is only accessible to users who are allowed to **get** **every MarathonNode**.
  """
  marathonForYear(year: String!): MarathonNode

  """
  This query is only accessible to users who are allowed to **get** any **MarathonHourNode** with an id of **args.id**.
  """
  marathonHour(id: GlobalId!): MarathonHourNode

  """
  This query is only accessible to users who are allowed to **list** **every MarathonHourNode**.
  """
  marathonHours(
    filters: MarathonHourResolverFilterGroup

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: MarathonHourResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [MarathonHourResolverSort!]
  ): ListMarathonHoursResponse

  """
  This query is only accessible to users who are allowed to **list** **every MarathonNode**.
  """
  marathons(
    filters: MarathonResolverFilterGroup

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: MarathonResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [MarathonResolverSort!]
  ): ListMarathonsResponse
  me: PersonNode

  """
  This query is only accessible to users who are allowed to [**custom subject function** ()].
  """
  node(id: GlobalId!): Node

  """
  This query is only accessible to users who are allowed to **get** any **NotificationNode** with an id of **args.id**.
  """
  notification(id: GlobalId!): NotificationNode

  """
  This query is only accessible to users who are allowed to **list** **every NotificationDeliveryNode**.
  """
  notificationDeliveries(
    filters: NotificationDeliveryResolverFilterGroup
    notificationUuid: GlobalId!

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: NotificationDeliveryResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [NotificationDeliveryResolverSort!]
  ): ListNotificationDeliveriesResponse

  """
  This query is only accessible to users who are allowed to **list** **every NotificationNode**.
  """
  notifications(
    filters: NotificationResolverFilterGroup

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: NotificationResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [NotificationResolverSort!]
  ): ListNotificationsResponse

  """
  This query is only accessible to users who are allowed to **list** **every PersonNode**.
  """
  people(
    filters: PersonResolverFilterGroup

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: PersonResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [PersonResolverSort!]
  ): ListPeopleResponse

  """
  This query is only accessible to users who are allowed to **get** any **PersonNode** with an id of **args.id**.
  """
  person(id: GlobalId!): PersonNode

  """
  This query is only accessible to users who are allowed to [**custom subject function** ()].
  """
  personByLinkBlue(linkBlueId: String!): PersonNode

  """
  This query is only accessible to users who are allowed to **list** **every PointEntryNode**.
  """
  pointEntries(
    filters: PointEntryResolverFilterGroup

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: PointEntryResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [PointEntryResolverSort!]
  ): ListPointEntriesResponse

  """
  This query is only accessible to users who are allowed to **get** any **PointEntryNode** with an id of **args.id**.
  """
  pointEntry(id: GlobalId!): PointEntryNode

  """
  This query is only accessible to users who are allowed to **list** **every PointOpportunityNode**.
  """
  pointOpportunities(
    filters: PointOpportunityResolverFilterGroup

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: PointOpportunityResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [PointOpportunityResolverSort!]
  ): ListPointOpportunitiesResponse

  """
  This query is only accessible to users who are allowed to **get** any **PointOpportunityNode** with an id of **args.id**.
  """
  pointOpportunity(id: GlobalId!): PointOpportunityNode

  """
  The output of this query is not stable. Do not rely on an exact format.

  This query is only accessible to users who are allowed to **list** **every FundraisingEntryNode**.
  """
  report(
    from: LuxonDateTime
    report: NonEmptyString!
    requireAllTags: Boolean
    solicitationCodeIds: [GlobalId!]
    solicitationCodeTags: [SolicitationCodeTag!]
    to: LuxonDateTime
  ): Report

  """
  This query is only accessible to users who are allowed to **list** **every PersonNode**.
  """
  searchPeopleByName(name: String!): [PersonNode!]

  """
  This query is only accessible to users who are allowed to **get** any **SolicitationCodeNode** with an id of **args.id**.
  """
  solicitationCode(id: GlobalId!): SolicitationCodeNode

  """
  This query is only accessible to users who are allowed to **list** **every SolicitationCodeNode**.
  """
  solicitationCodes(
    filters: SolicitationCodeResolverFilterGroup

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: SolicitationCodeResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [SolicitationCodeResolverSort!]
  ): ListSolicitationCodesResponse

  """
  This query is only accessible to users who are allowed to **get** any **TeamNode** with an id of **args.id**.
  """
  team(id: GlobalId!): TeamNode

  """
  This query is only accessible to users who are allowed to **list** **every TeamNode**.
  """
  teams(
    filters: TeamResolverFilterGroup

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: TeamResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [TeamResolverSort!]
  ): ListTeamsResponse
}

input RegisterDeviceInput {
  """
  For legacy reasons, this can be a GlobalId or a raw UUID
  """
  deviceId: String!

  """
  The Expo push token of the device
  """
  expoPushToken: String

  """
  The ID of the last user to log in on this device
  """
  lastUserId: GlobalId

  """
  base64 encoded SHA-256 hash of a secret known to the device
  """
  verifier: String!
}

type RegisterDeviceResponse {
  data: DeviceNode!
  ok: Boolean!
}

type Report {
  pages: [ReportPage!]!
}

type ReportPage {
  header: [String!]!
  rows: [[String!]!]!
  title: NonEmptyString!
}

input SetEventInput {
  description: NonEmptyString
  location: NonEmptyString
  occurrences: [SetEventOccurrenceInput!]!
  summary: NonEmptyString
  title: String!
}

input SetEventOccurrenceInput {
  fullDay: Boolean!

  """
  If updating an existing occurrence, the GlobalId of the occurrence to update
  """
  id: GlobalId
  interval: IntervalISOInput!
}

input SetFeedInput {
  textContent: NonEmptyString
  title: NonEmptyString!
}

input SetFundraisingEntryInput {
  amountOverride: Float
  batchTypeOverride: BatchType
  donatedByOverride: NonEmptyString
  donatedOnOverride: LocalDate
  donatedToOverride: NonEmptyString
  notes: NonEmptyString
  solicitationCodeOverrideId: GlobalId
}

input SetMarathonHourInput {
  details: NonEmptyString
  durationInfo: NonEmptyString!
  shownStartingAt: LuxonDateTime!
  title: NonEmptyString!
}

input SetMarathonInput {
  endDate: LuxonDateTime
  startDate: LuxonDateTime
  year: MarathonYear!
}

input SetPasswordInput {
  """
  If set to a string, replaces or sets the user's password. If set to null it clears any existing password
  """
  password: NonEmptyString
}

input SetPersonInput {
  captainOf: [MemberOf!]
  email: EmailAddress
  linkblue: NonEmptyString
  memberOf: [MemberOf!]
  name: NonEmptyString
}

input SetPointOpportunityInput {
  eventUuid: GlobalId
  name: NonEmptyString
  opportunityDate: LuxonDateTime
  type: TeamType
}

input SetSolicitationCodeInput {
  name: NonEmptyString
  tags: [SolicitationCodeTag!]!
  teamIds: [GlobalId!]!
}

input SetTeamInput {
  legacyStatus: TeamLegacyStatus
  name: NonEmptyString
  persistentIdentifier: NonEmptyString
  type: TeamType
}

input SingleBooleanFilter {
  comparison: SingleTargetOperators!
  value: Boolean!
}

input SingleDateFilter {
  comparison: SingleTargetOperators!
  value: LuxonDateTime!
}

input SingleNumberFilter {
  comparison: SingleTargetOperators!
  value: Float!
}

input SingleStringFilter {
  comparison: SingleTargetOperators!
  value: String!
}

enum SingleTargetOperators {
  CONTAINS
  ENDS_WITH
  EQUALS
  GREATER_THAN
  GREATER_THAN_OR_EQUAL_TO
  INSENSITIVE_CONTAINS
  INSENSITIVE_ENDS_WITH
  INSENSITIVE_NOT_CONTAINS
  INSENSITIVE_NOT_ENDS_WITH
  INSENSITIVE_NOT_STARTS_WITH
  INSENSITIVE_STARTS_WITH
  LESS_THAN
  LESS_THAN_OR_EQUAL_TO
  NOT_CONTAINS
  NOT_ENDS_WITH
  NOT_EQUALS
  NOT_STARTS_WITH
  STARTS_WITH
}

type SolicitationCodeNode implements Node {
  code: NonNegativeInt!
  createdAt: LuxonDateTime

  """
  This field is only accessible to users who are allowed to **list** **every FundraisingEntryNode**.
  """
  entries(
    filters: FundraisingEntryResolverFilterGroup

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: FundraisingEntryResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [FundraisingEntryResolverSort!]
  ): ListFundraisingEntriesResponse
  id: GlobalId!
  name: String
  prefix: String!
  tags: [SolicitationCodeTag!]!

  """
  This field is only accessible to users who are allowed to **list** **every TeamNode**.
  """
  teams(marathonId: GlobalId): [TeamNode!]
  text: String!
  updatedAt: LuxonDateTime
}

enum SolicitationCodeResolverFilterFields {
  code
  createdAt
  name
  prefix
  tags
  text
  updatedAt
}

input SolicitationCodeResolverFilterGroup {
  children: [SolicitationCodeResolverFilterGroup!]! = []
  filters: [SolicitationCodeResolverFilterItem!]! = []
  operator: FilterGroupOperator!
}

input SolicitationCodeResolverFilterItem {
  field: SolicitationCodeResolverFilterFields!
  filter: SomeFilter!
}

input SolicitationCodeResolverSearchFilter {
  """
  The fields to search in. If unspecified, searches all searchable fields. Note that searching by a field that does not support it will cause a runtime error
  """
  fields: [SolicitationCodeResolverFilterFields!]
  query: NonEmptyString!
}

input SolicitationCodeResolverSort {
  direction: SortDirection! = asc
  field: SolicitationCodeResolverFilterFields!
}

"""
The tags for a solicitation code
"""
enum SolicitationCodeTag {
  Active
  DancerTeam
  General
  MiniMarathon
}

"""
Either the global id of a solicitation code or a string to create a new one
"""
scalar SolicitationCodeUpsert

input SomeFilter {
  arrayArrayFilter: ArrayArrayFilter
  arrayBooleanFilter: ArrayBooleanFilter
  arrayDateFilter: ArrayDateFilter
  arrayNumberFilter: ArrayNumberFilter
  arrayStringFilter: ArrayStringFilter
  nullFilter: NullFilter
  singleBooleanFilter: SingleBooleanFilter
  singleDateFilter: SingleDateFilter
  singleNumberFilter: SingleNumberFilter
  singleStringFilter: SingleStringFilter
  twoDateFilter: TwoDateFilter
  twoNumberFilter: TwoNumberFilter
}

enum SortDirection {
  asc
  desc
}

"""
New Team vs Returning Team
"""
enum TeamLegacyStatus {
  DemoTeam
  NewTeam
  ReturningTeam
}

type TeamNode implements Node {
  committeeIdentifier: CommitteeIdentifier
  createdAt: LuxonDateTime

  """
  This field is only accessible to users who are allowed to **list** any **TeamNode.fundraisingEntries** with an id of **root.id**.
  """
  fundraisingEntries(
    filters: FundraisingEntryResolverFilterGroup

    """
    The page number to return, defaults to 1
    """
    page: PositiveInt = 1

    """
    The number of items to return per page, defaults to 10
    """
    pageSize: NonNegativeInt = 10
    search: FundraisingEntryResolverSearchFilter

    """
    Whether to send all results in a single page, defaults to false (should generally be avoided)
    """
    sendAll: Boolean = false

    """
    The fields to sort by, in order of priority. If unspecified, the sort order is undefined
    """
    sortBy: [FundraisingEntryResolverSort!]
  ): ListFundraisingEntriesResponse

  """
  This field is only accessible to users who are allowed to **get** any **TeamNode.fundraisingTotal** with an id of **root.id**.
  """
  fundraisingTotalAmount: Float
  id: GlobalId!
  legacyStatus: TeamLegacyStatus!
  marathon: MarathonNode!

  """
  This field is only accessible to users who are allowed to **get** any **TeamNode** with an id of **root.id**.
  """
  members: [MembershipNode!]
  name: String!

  """
  This field is only accessible to users who are allowed to **get** **every TeamNode**.
  """
  pointEntries: [PointEntryNode!]

  """
  This field is only accessible to users who are allowed to **get** any **TeamNode.solicitationCode** with an id of **root.id**.
  """
  solicitationCode: SolicitationCodeNode
  text: String!
  totalPoints: Int!
  type: TeamType!
  updatedAt: LuxonDateTime
}

enum TeamResolverFilterFields {
  legacyStatus
  marathonYear
  name
  totalPoints
  type
}

input TeamResolverFilterGroup {
  children: [TeamResolverFilterGroup!]! = []
  filters: [TeamResolverFilterItem!]! = []
  operator: FilterGroupOperator!
}

input TeamResolverFilterItem {
  field: TeamResolverFilterFields!
  filter: SomeFilter!
}

input TeamResolverSearchFilter {
  """
  The fields to search in. If unspecified, searches all searchable fields. Note that searching by a field that does not support it will cause a runtime error
  """
  fields: [TeamResolverFilterFields!]
  query: NonEmptyString!
}

input TeamResolverSort {
  direction: SortDirection! = asc
  field: TeamResolverFilterFields!
}

"""
Types of teams
"""
enum TeamType {
  Mini
  Morale
  Spirit
}

input TwoDateFilter {
  comparison: TwoTargetOperators!
  lower: LuxonDateTime!
  upper: LuxonDateTime!
}

input TwoNumberFilter {
  comparison: TwoTargetOperators!
  lower: Float!
  upper: Float!
}

enum TwoTargetOperators {
  BETWEEN
  NOT_BETWEEN
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

input UpdateFundraisingAssignmentInput {
  amount: Float!
}

"""
Represents NULL values
"""
scalar Void
